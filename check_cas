#!/usr/bin/env python

from ConfigParser import SafeConfigParser
from bs4 import BeautifulSoup as soupy
from timeit import default_timer

import argparse
import logging
import nagiosplugin
import os
import requests
import sys

"""
Attempts to log in to CAS.
"""

# acquire a logger and set defaults
log = logging.getLogger(__file__)
log.propagate = False
fmat = '[%(name)s %(levelname)s] %(asctime)s in %(funcName)s(): %(message)s'
fmat = logging.Formatter(fmat)
console_log = logging.StreamHandler()
console_log.setLevel(logging.DEBUG)
console_log.setFormatter(fmat)
log.addHandler(console_log)

def login_elements(tag):
    """A filter to find cas login form elements"""
    return tag.has_key('name') and tag.has_key('value')

def process_redirects(response):
    if response.history:
        for hop in response.history:
            log.info('URL=%s status=%s', hop.url, hop.status_code)
            if 300 <= hop.status_code < 400:
                log.info('Redirecting to URL=%s', hop.headers['location'])
                return requests.get(hop.headers['location'])
    else:
        return response

class Timer(object):

    def __init__(self):
        self.timer = default_timer

    def __enter__(self):
        self.start = self.timer()
        return self

    def __exit__(self, *args):
        end = self.timer()
        self.elapsed_secs = (end - self.start)

class CasCheck(nagiosplugin.Resource):
    requires = ['cas_url']
    
    def __init__(self, config_dict):
        self.url         = config_dict['cas_url']
   
    def get(self):
        with Timer() as self.init_timing:
            page = process_redirects(requests.get(self.url, allow_redirects=True))

        log.info('GET url="%s" took time="%s"',
                 self.url,
                 self.init_timing.elapsed_secs,
                )

        return page

    def probe(self):
        log.debug('probe beginning for url="%s"', self.url)
        self.get()
        yield nagiosplugin.Metric('cas_page_load',
                                  self.init_timing.elapsed_secs,
                                  uom='s',
                                  context='CAS')

class CasLogin(CasCheck):
    requires = [
                'cas_url',
                'username',
                'password',
                'cas_success_txt',
               ]
    
    def __init__(self, config_dict):
        super(CasLogin, self).__init__(config_dict)
        self.username    = config_dict['username']
        self.password    = config_dict['password']
        self.success_txt = config_dict['cas_success_txt']

    def post(self):
        page = self.get()
        
        cas_doc = soupy(page.text)
        form_inputs = cas_doc.find_all(login_elements)
        # go with whatever action CAS asks for
        action = cas_doc.findAll('form')[0].attrs['action']

        login_data = dict()
        for tag in form_inputs:
            login_data[tag['name']] = tag['value']

        login_data['username'] = self.username
        login_data['password'] = self.password

        log.debug('Logging in login_data="%s"', str(login_data))
        with Timer() as self.login_timing:
            page = requests.post(self.url, login_data, cookies=page.cookies)
            page = process_redirects(page)
        
        return page

    def probe(self):
        page = self.post()

        if self.success_txt in page.text:
            yield nagiosplugin.Metric('cas_login',
                                      self.login_timing.elapsed_secs,
                                      uom='s',
                                      context='CAS')

        log.info('POSTing to url="%s" took response_time="%s"',
                 self.url,
                 self.login_timing.elapsed_secs,
                )

class CasConnectorLogin(CasLogin):
    requires = [
                'cas_url',
                'username',
                'password',
                'cas_success_txt',
                'service_url',
                'target_url',
               ]

    def __init__(self, config_dict):
        super(CasConnectorLogin, self).__init__(config_dict)
        self.url = config_dict['service_url']
        self.target_url = config_dict['target_url']

    def login(self):
        pass

    def probe(self):
        page = self.post()

        yield nagiosplugin.Metric('service_request',
                                  self.init_timing.elapsed_secs,
                                  uom='s',
                                  context='CAS')
        

def parse_config(config_file, section):
    """Returns a dict with the requested keys from section@config_file."""
    parser = SafeConfigParser()
    config = os.path.abspath(config_file)
    log.info('section="%s" in file="%s"', section, config)
    parser.read(config)
    configuration = dict()
    
    check_class = parser.get(section, 'class')
    required_keys = globals()[check_class].requires

    for k in required_keys:
        configuration[k] = parser.get(section, k)
    log.debug('configuration=%s', str(configuration))
    return check_class, configuration

# guarded ensures the script always exits with a nagios-friendy return
@nagiosplugin.guarded
def main():
    # set up the argument parser
    parser = argparse.ArgumentParser(description=__doc__)

    parser.add_argument('-w', '--warning', metavar='milliseconds',
                        help='CAS is warning if response time is > n ms.')
    parser.add_argument('-c', '--critical', metavar='milliseconds',
                        help='CAS is critical if response time is > n ms.')
    parser.add_argument('-v', '--verbose', action='count',
                        help='Up to -vvvv for added detail.')
    parser.add_argument('--extra-opts', type=str,
                        default='cas_check@/etc/nagios/private/custom.ini',
                        help='Look for check params in section@/ini/file/path.ini')

    args = parser.parse_args()
    
    # verbosity handling
    if args.verbose and args.verbose <= 4:
        verbosity = logging.FATAL - (args.verbose * 10) # logging.FATAL==50
    elif args.verbose > 4:
        verbosity = logging.DEBUG                       # logging.DEBUG==10
    else:
        verbosity = logging.FATAL

    log.setLevel(verbosity)
    log.debug('command="%s"', ' '.join(sys.argv))

    # split the section from the file name
    config_section, config_file = args.extra_opts.split('@')

    check_class, config = parse_config(config_file, config_section)

    check = nagiosplugin.Check(
        globals()[check_class](config),
        nagiosplugin.ScalarContext('CAS', args.warning, args.critical)
    )
    check.main()

if __name__ == '__main__':
    main()

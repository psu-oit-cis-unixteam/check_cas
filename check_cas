#!/usr/bin/env python

from bs4 import BeautifulSoup as soupy
from timeit import default_timer

import argparse
import logging
import nagiosplugin
import requests

"""
Attempts to log in to CAS.
"""

def login_elements(tag):
    """A filter to find cas login form elements"""
    return tag.has_key('name') and tag.has_key('value')

class Timer(object):

    def __init__(self):
        self.timer = default_timer

    def __enter__(self):
        self.start = self.timer()
        return self

    def __exit__(self, *args):
        end = self.timer()
        self.elapsed_secs = (end - self.start)

class CasLogin(nagiosplugin.Resource):
    
    def __init__(self, url, user, password, success_txt='Log In Successful'):
        self.url      = url
        self.user     = user
        self.password = password

    def probe(self):
        with Timer() as init_timing:
            page = requests.get(self.url)

        cas_doc = soupy(page.text)
        form_inputs = cas_doc.find_all(login_elements)

        login_data = dict()
        for tag in form_inputs:
            login_data[tag['name']] = tag['value']

        login_data['username'] = self.user
        login_data['password'] = self.password

        with Timer() as login_timing:
            page = requests.post(self.url, login_data, cookies=page.cookies)

        if success_text in page.text:
            yield nagiosplugin.Metric('cas_page_load',
                                      init_timing.elapsed_secs,
                                      uom='s',
                                      context='CAS')
            yield nagiosplugin.Metric('cas_login',
                                      login_timing.elapsed_secs,
                                      uom='s',
                                      context='CAS')
        else:
            return False

# guarded ensures the script always exits with a nagios-friendy return
@nagiosplugin.guarded
def main():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-w', '--warning', metavar='milliseconds',
                        help='CAS is warning if response time is > n ms.')
    parser.add_argument('-c', '--critical', metavar='milliseconds',
                        help='CAS is critical if response time is > n ms.')
    parser.add_argument('-v', '--verbose', action='count', default=0,
                        help='add Vs for more verbosity.')
    parser.add_argument('URL', type=str, nargs=1,
                        help="CAS base i.e. https://sso.example.com/cas/login")

    args = parser.parse_args()
    print args

if __name__ == '__main__':
    main()
